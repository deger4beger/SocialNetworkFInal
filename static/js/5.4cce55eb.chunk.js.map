{"version":3,"sources":["hoc/withAuthRedirect.js","components/ChatPage/ChatPage.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","Messages","wsChannel","useState","messages","setMessages","useEffect","messageHandler","e","newMessages","JSON","parse","data","prev","addEventListener","removeEventListener","style","height","overflowY","map","m","index","MessageItem","message","src","photo","width","alt","marginLeft","userName","AddMessageForm","setMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","onClick","send","disabled","setWsChannel","ws","closeHandler","setTimeout","createChannel","close","WebSocket"],"mappings":"gOAIIA,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAACC,GAAe,IACzCC,EADwC,uKAG5C,OAAKC,KAAKC,MAAMN,OACR,cAACG,EAAD,eAAeE,KAAKC,QADG,cAAC,IAAD,CAAUC,GAAG,eAHA,GACdC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,oFCgCpEM,EAAoD,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAC1CC,mBAA4B,IADc,mBACnEC,EADmE,KACzDC,EADyD,KAe1E,OAZAC,qBAAU,WACT,IAAMC,EAAiB,SAACC,GACvB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BP,GAAY,SAACQ,GAAD,4BAAcA,GAAd,YAAuBJ,QAIpC,OAFS,OAATP,QAAS,IAATA,KAAWY,iBAAiB,UAAWP,GAEhC,WACG,OAATL,QAAS,IAATA,KAAWa,oBAAoB,UAAWR,MAEzC,CAACL,IAEG,qBAAKc,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAzC,SACLd,EAASe,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAyBC,QAASH,GAAhBC,SAI1CC,EAAoD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAE3D,OAAO,gCACN,qBAAKC,IAAKD,EAAQE,MAAOT,MAAO,CAACU,MAAO,QAASC,IAAI,KAAK,mBAAGX,MAAO,CAACY,WAAY,QAAvB,SAAiCL,EAAQM,WACnG,uBACCN,EAAQA,QACT,2BAIIO,EAA0D,SAAC,GAAiB,IAAhB5B,EAAe,EAAfA,UAAe,EAElDC,mBAAS,IAFyC,mBAEzEoB,EAFyE,KAEhEQ,EAFgE,OAG1C5B,mBAA8B,WAHY,mBAGzE6B,EAHyE,KAG5DC,EAH4D,KAKhF3B,qBAAW,WACV,IAAI4B,EAAc,WACjBD,EAAe,UAIhB,OAFS,OAAT/B,QAAS,IAATA,KAAWY,iBAAiB,OAAQoB,GAE7B,WACG,OAAThC,QAAS,IAATA,KAAWa,oBAAoB,OAAQmB,MAEtC,CAAChC,IAUJ,OAAO,gCACN,8BACC,0BAAUiC,SAAU,SAAC3B,GAAD,OAAOuB,EAAWvB,EAAE4B,cAAcC,QAAQA,MAAOd,MAEtE,8BACC,wBAAQe,QAbU,WACdf,IAGI,OAATrB,QAAS,IAATA,KAAWqC,KAAKhB,GAChBQ,EAAW,MAQoBS,SAAwB,OAAdtC,GAAsC,YAAhB8B,EAA9D,wBAMYvC,uBA/FQ,WAAO,IAAD,EAEMU,mBAA2B,MAFjC,mBAErBD,EAFqB,KAEVuC,EAFU,KAwB5B,OApBAnC,qBAAW,WACV,IAAIoC,EACEC,EAAe,WACpBC,WAAWC,EAAe,MAE3B,SAASA,IAAiB,IAAD,IACtB,QAAF,EAAAH,SAAA,SAAI3B,oBAAoB,QAAS4B,GAC/B,QAAF,EAAAD,SAAA,SAAII,SACJJ,EAAK,IAAIK,UAAU,iEAChBjC,iBAAiB,QAAS6B,GAC7BF,EAAaC,GAId,OAFAG,IAEO,WACNH,EAAG3B,oBAAoB,QAAS4B,GAChCD,EAAGI,WAEF,IAEI,gCACN,cAAC7C,EAAD,CAAUC,UAAWA,IACrB,cAAC4B,EAAD,CAAgB5B,UAAWA","file":"static/js/5.4cce55eb.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport {connect} from \"react-redux\"\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n\t\tisAuth: state.auth.isAuth\r\n\t})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\tclass RedirectComponent extends React.Component {\r\n\t\trender() {\r\n\t\t\tif (!this.props.isAuth) return <Redirect to=\"/login\" />\t\r\n\t\t\t\treturn <Component {...this.props} />\r\n\t\t}\r\n\t}\r\n\r\n\tlet ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\treturn ConnectedAuthRedirectComponent\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\ntype ChatMessageType = {\r\n\tmessage: string,\r\n\tphoto: string,\r\n\tuserId: number,\r\n\tuserName: string\r\n}\r\n\r\n// const Chat: React.FC = () => {\r\n// \treturn \r\n// \t\t<div>\r\n// \t\t\t<Messages />\r\n// \t\t\t<AddMessageForm />\r\n// \t\t</div>\r\n// }\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n\tconst [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n\tuseEffect( () => {\t\r\n\t\tlet ws: WebSocket\t\r\n\t\tconst closeHandler = () => {\r\n\t\t\tsetTimeout(createChannel, 3000)\r\n\t\t}\t\t\r\n\t\tfunction createChannel() {\r\n\t\t\tws?.removeEventListener(\"close\", closeHandler)\r\n\t\t\tws?.close() \r\n\t\t\tws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n\t\t\tws.addEventListener(\"close\", closeHandler)\r\n\t\t\tsetWsChannel(ws)\r\n\t\t}\r\n\t\tcreateChannel()\r\n\r\n\t\treturn () => {\r\n\t\t\tws.removeEventListener(\"close\", closeHandler)\r\n\t\t\tws.close()\r\n\t\t}\r\n\t}, [])\r\n\r\n\treturn <div>\r\n\t\t<Messages wsChannel={wsChannel} />\r\n\t\t<AddMessageForm wsChannel={wsChannel} />\r\n\t</div>\r\n}\r\n\r\nconst Messages: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n\tconst [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst messageHandler = (e: MessageEvent) => {\r\n\t\t\tlet newMessages = JSON.parse(e.data)\r\n\t\t\tsetMessages((prev) => [...prev, ...newMessages])\r\n\t\t}\r\n\t\twsChannel?.addEventListener(\"message\", messageHandler)\r\n\r\n\t\treturn () => {\r\n\t\t\twsChannel?.removeEventListener(\"message\", messageHandler)\r\n\t\t}\r\n\t}, [wsChannel])\r\n\r\n\treturn <div style={{height: \"500px\", overflowY: \"auto\"}}>\r\n\t\t{messages.map((m, index) => <MessageItem key={index} message={m} />)}\r\n\t</div>\r\n}\r\n\r\nconst MessageItem: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n\r\n\treturn <div>\r\n\t\t<img src={message.photo} style={{width: \"30px\"}} alt=\"\" /><b style={{marginLeft: \"15px\"}}>{message.userName}</b>\r\n\t\t<br />\r\n\t\t{message.message}\r\n\t\t<hr />\r\n\t</div>\r\n}\r\n\r\nconst AddMessageForm: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n\r\n\tconst [message, setMessage] = useState(\"\")\r\n\tconst [readyStatus, setReadyStatus] = useState<\"pending\" | \"ready\">(\"pending\")\r\n\r\n\tuseEffect( () => {\r\n\t\tlet openHandler = () => {\r\n\t\t\tsetReadyStatus(\"ready\")\r\n\t\t}\r\n\t\twsChannel?.addEventListener(\"open\", openHandler)\r\n\r\n\t\treturn () => {\r\n\t\t\twsChannel?.removeEventListener(\"open\", openHandler)\r\n\t\t}\r\n\t}, [wsChannel])\r\n\r\n\tconst sendMessage = () => {\r\n\t\tif (!message) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\twsChannel?.send(message)\r\n\t\tsetMessage(\"\")\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<div>\r\n\t\t\t<textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<button onClick={sendMessage} disabled={wsChannel === null || readyStatus === \"pending\"}>Send</button>\r\n\t\t</div>\r\n\t</div>\r\n}\r\n\r\n\r\nexport default withAuthRedirect(Chat)\r\n\r\n"],"sourceRoot":""}